<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resource Server on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/9/admin-api/resource_server/</link>
    <description>Recent content in Resource Server on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/9/admin-api/resource_server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Platform and CQRS integration</title>
      <link>https://devdocs.prestashop-project.org/9/admin-api/resource_server/api-platform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/9/admin-api/resource_server/api-platform/</guid>
      <description>API Platform and CQRS integration CQRS based APISince the beginning of the Symfony migration, we chose CQRS as our base architecture, and their usage for the future API was already anticipated because:&#xA;it gives a more &amp;ldquo;domain approach&amp;rdquo; to our implementation, with more business logic than a simple CRUD since the BO is already based on CQRS commands, it guarantees a uniform behaviour between the BO and the API all the CQRS commands and queries are Behat tested, so they give a good insurance for stability we capitalize on all the work that was done during the BO migration to build the Admin API API PlatformThe implementation of the Admin API is based on the API Platform framework, this technical choice was made because of these advantages:</description>
    </item>
    <item>
      <title>API Resources</title>
      <link>https://devdocs.prestashop-project.org/9/admin-api/resource_server/api-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/9/admin-api/resource_server/api-resources/</guid>
      <description>API ResourcesAPI Platform has many different ways to configure and define APIs (PHP, YAML, XML). We chose the PHP approach relying on PHP attributes to simplify and centralize the configuration in a single file, which is why:&#xA;Use of PHP attributes to be closer to the code We tried to keep the configuration to the minimum Scopes are defined directly on the endpoint, they are transformed into roles for Symfony behind the scene The scopes specified on each endpoint are extracted and used dynamically in the back office for edition All the API Platform configuration is still usable Automatic loading from foldersWe configured PrestaShop so that it automatically loads API resource classes from the core AND from the modules (handled by PrestaShopExtension) as long as the following convention is respected:</description>
    </item>
  </channel>
</rss>
