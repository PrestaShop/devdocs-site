<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/1.7/testing/</link>
    <description>Recent content in Testing on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/1.7/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://devdocs.prestashop-project.org/1.7/testing/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/testing/introduction/</guid>
      <description>How testing works in PrestaShop PrestaShop is a complex software and uses automated testing to ensure that the new additions to the codebase do not break existing behaviors.&#xA;Automated tests are located in tests and tests-legacy folders.&#xA;What kind of tests do PrestaShop use?In the tests folder, you will find:&#xA;Unit tests Integration tests User interface tests Unit testsUnit tests are powered by PHPUnit. They test one and only one php class, mocking/stubbing any dependencies that class has.</description>
    </item>
    <item>
      <title>How to create your own unit tests</title>
      <link>https://devdocs.prestashop-project.org/1.7/testing/how-to-create-your-own-unit-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/testing/how-to-create-your-own-unit-tests/</guid>
      <description>How to create your own unit tests or add tests to PrestaShopUnit tests are great if you want to validate the behavior of a single unit of code. By &amp;ldquo;unit of code&amp;rdquo; we usually mean a class although it could also be a script.&#xA;Creating a Unit testEverything is explained in the PHPUnit 5.7 documentation.&#xA;For unit tests, we strongly encourage you to base your test on the PHPUnit&amp;rsquo;s TestCase class only.</description>
    </item>
    <item>
      <title>How to execute tests</title>
      <link>https://devdocs.prestashop-project.org/1.7/testing/how-to-launch-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/testing/how-to-launch-tests/</guid>
      <description>How to execute the PrestaShop automatic test suite Executing Unit/integration test suitesAt least four test suites are available, testing different parts of PrestaShop:&#xA;Legacy tests: heritage from PrestaShop 1.6: mix of unit, integration and functional tests; Legacy controllers: added to help with the Symfony migration, ensures that old Back Office controllers are still runnable; Admin tests: specific to PrestaShop 1.7, tests src/Core and src/Adapter classes; Symfony specific tests: specific to PrestaShop 1.</description>
    </item>
    <item>
      <title>How to create your own symfony controller tests</title>
      <link>https://devdocs.prestashop-project.org/1.7/testing/how-to-create-your-own-symfony-controller-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/testing/how-to-create-your-own-symfony-controller-tests/</guid>
      <description>How to create your own symfony controller tests or add tests to PrestaShopIf you create your own Modern (symfony) controllers or if you plan on migrating a legacy controller, you can create tests to cover parts of HTTP layer aka symfony functional tests.&#xA;Creating a functional testTo create a functional test, we encourage you to base your test class on our own implementation of WebTestCase.&#xA;For instance:&#xA;&amp;lt;?php namespace Tests\Functional\Foo; use Tests\Integration\PrestaShopBundle\Test\WebTestCase; class BarTest extends WebTestCase { public function testSomeAction() { $url = this-&amp;gt;router-&amp;gt;generate(&amp;#39;route_name&amp;#39;); $this-&amp;gt;client-&amp;gt;request(&amp;#39;GET&amp;#39;, $url); $response = $this-&amp;gt;client-&amp;gt;getResponse(); self::assertTrue($response-&amp;gt;isSuccessful()); } } Find out more in Symfony&amp;rsquo;s documentation on functional testing.</description>
    </item>
    <item>
      <title>How to create your own Behat tests</title>
      <link>https://devdocs.prestashop-project.org/1.7/testing/how-to-create-your-own-behat-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/testing/how-to-create-your-own-behat-tests/</guid>
      <description>How to create your own Behat tests or add tests to PrestaShop Behat tests are great if you want to validate the behavior of a component of the code and/or follow a user-oriented scenario.&#xA;By &amp;ldquo;component&amp;rdquo; we usually mean a group of classes being called together, sometimes using an external dependency (a web API or a database system like MySQL).&#xA;By &amp;ldquo;user-oriented scenario&amp;rdquo; we mean a scenario that is a series of steps, each step is an action, and at the end of the series there is an expected result</description>
    </item>
  </channel>
</rss>
