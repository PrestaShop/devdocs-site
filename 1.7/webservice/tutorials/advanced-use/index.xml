<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced use on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/</link>
    <description>Recent content in Advanced use on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Additional list parameters</title>
      <link>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/additional-list-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/additional-list-parameters/</guid>
      <description>Additional list parametersPrevious tutorials only use simple list that returns the IDs of the resources, but you can actually get more details, sort and filter the list.&#xA;Display parameterYou can specify which fields you want for each resource using the display parameter.&#xA;Key Value Result display full Returns all the fields of the resource [field1,field2,...] Returns only the fields specified in this array Result API call PHP Webservice lib options Include all fields from the products resource /api/products/?</description>
    </item>
    <item>
      <title>Image management</title>
      <link>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/image-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/image-management/</guid>
      <description>Image managementPrestaShop manages images via the image resource, and several other resources use it as well to manage their own images. There are several types of images available, which can all be accessed via their respective API:&#xA;Image type API url General shop images /api/images/general Product images /api/images/products Category images /api/images/categories Customization images /api/images/customizations Manufacturer images /api/images/manufacturers Supplier images /api/images/suppliers Store images /api/images/stores If you need to get a list of image types you can also use the /api/images API which lists all of them.</description>
    </item>
    <item>
      <title>Specific prices</title>
      <link>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/specific-price/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/specific-price/</guid>
      <description>Specific pricesPrestaShop offers a feature that allows to set specific prices depending on various parameters (country, currency, customer group, &amp;hellip;). The regular API only return the generic prices so if you need some specific prices you can use the price parameter. It is available on:&#xA;products combinations Custom prices will be added in an alias field that you need to indicate in your parameters.&#xA;ExampleLet&amp;rsquo;s say you want to retrieve the price for combination 25 of the product 2, with tax, in a webservice field name my_price, then you&amp;rsquo;ll need to query:</description>
    </item>
    <item>
      <title>Manage Configuration</title>
      <link>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/manage-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/manage-configuration/</guid>
      <description>Manage ConfigurationYou can manage your shop configuration thanks to the API, in this example we will set the PS_MULTISHOP_FEATURE_ACTIVE to true (which enables multishop mode).&#xA;API callFirst check if the configuration already exists by using filters and display parameters /api/configurations/?display=[id,name,value]&amp;amp;filter[name]=[PS_MULTISHOP_FEATURE_ACTIVE]&#xA;Create configurationIf the configuration doesn&amp;rsquo;t exist yet, you will receive an empty list:&#xA;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;prestashop xmlns:xlink=&amp;#34;http://www.w3.org/1999/xlink&amp;#34;&amp;gt; &amp;lt;configurations&amp;gt; &amp;lt;/configurations&amp;gt; &amp;lt;/prestashop&amp;gt; So you need to POST on the configuration API /api/configurations/ to create this new value</description>
    </item>
    <item>
      <title>Manage Multishop</title>
      <link>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/manage-multishop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/manage-multishop/</guid>
      <description>Manage MultishopIn order to use web services when the multishop feature is enabled, you can use the regular API requests and add the id_shop parameter (or the id_group_shop parameter for overriding by group).&#xA;Enable MultishopThe Multishop can be enabled via the PS_MULTISHOP_FEATURE_ACTIVE configuration value, here is a tutorial to manage configuration via API.&#xA;List shopsOnce you have several instances you can access to the shop list and their IDs.</description>
    </item>
    <item>
      <title>Multilingual Fields</title>
      <link>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/multilang-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/webservice/tutorials/advanced-use/multilang-fields/</guid>
      <description>Multilingual / localized FieldsSome entities have multilingual / localized fields, by default the API calls return the value for all languages installed in the Shop, but you might want to fine tune the expected result using the language parameter.&#xA;Language parameterYou can specify which fields you want for each resource using the display parameter.&#xA;Key Value Result language 3 Single value [3|5|...] OR operator: list of possible values [2,5] Interval operator: define interval of possible values Result API call Return product with ID 19 with translated fields for Language with id 3 /api/products/19?</description>
    </item>
  </channel>
</rss>
