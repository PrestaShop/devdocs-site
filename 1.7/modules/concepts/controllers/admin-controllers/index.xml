<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Admin controllers on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/1.7/modules/concepts/controllers/admin-controllers/</link>
    <description>Recent content in Admin controllers on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/1.7/modules/concepts/controllers/admin-controllers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Adding module links in the back-office side menu</title>
      <link>https://devdocs.prestashop-project.org/1.7/modules/concepts/controllers/admin-controllers/tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/modules/concepts/controllers/admin-controllers/tabs/</guid>
      <description>Adding module links in the back-office side menu On the PrestaShop back office, the links on the side menu are linked to AdminControllers and ModuleAdminController classes. The first ones come from the PrestaShop Core, but the second ones are defined by the modules. If you want to add a link to your ModuleAdminControllers in the back office sidebar, this guide is for you.&#xA;Tabs registrationIn order to register new links, open your main module class.</description>
    </item>
    <item>
      <title>Generate a Symfony route</title>
      <link>https://devdocs.prestashop-project.org/1.7/modules/concepts/controllers/admin-controllers/route-generation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/modules/concepts/controllers/admin-controllers/route-generation/</guid>
      <description>Generate a Symfony route from a module Manual generationIf the module uses a symfony controller then the best way of route generation is described in symfony docs. However, module, especially if using legacy controllers, don&amp;rsquo;t always have access to the symfony container or router. The Link object offers some helpers to help generate urls related to Symfony controllers and routes.&#xA;Using router via Link::getUrlSmarty &amp;lt;?php use Link; // Generate url with Symfony route $symfonyUrl = Link::getUrlSmarty(array(&amp;#39;entity&amp;#39; =&amp;gt; &amp;#39;sf&amp;#39;, &amp;#39;route&amp;#39; =&amp;gt; &amp;#39;admin_product_catalog&amp;#39;)); // Generate url with Symfony route and arguments $symfonyUrl = Link::getUrlSmarty(array( &amp;#39;entity&amp;#39; =&amp;gt; &amp;#39;sf&amp;#39;, &amp;#39;route&amp;#39; =&amp;gt; &amp;#39;admin_product_unit_action&amp;#39;, &amp;#39;sf-params&amp;#39; =&amp;gt; array( &amp;#39;action&amp;#39; =&amp;gt; &amp;#39;delete&amp;#39;, &amp;#39;id&amp;#39; =&amp;gt; 42, ) )); Using router via $link-&amp;gt;getAdminLink &amp;lt;?</description>
    </item>
    <item>
      <title>Override or decorate a Core controller</title>
      <link>https://devdocs.prestashop-project.org/1.7/modules/concepts/controllers/admin-controllers/override-decorate-controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/modules/concepts/controllers/admin-controllers/override-decorate-controller/</guid>
      <description>Override or decorate a Core controller If you want to extend the behavior of a Back Office page in PrestaShop, you have multiple options.&#xA;Most of standard extension needs can be fulfilled using one hook.&#xA;If there is no hook available for your need, and you only need to modify the visual appearance of the page, you might want to override a template.&#xA;But sometimes you want to modify the page in a deeper way.</description>
    </item>
  </channel>
</rss>
