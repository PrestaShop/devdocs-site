<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/1.7/modules/testing/</link>
    <description>Recent content in Testing on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/1.7/modules/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic checks</title>
      <link>https://devdocs.prestashop-project.org/1.7/modules/testing/basic-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/modules/testing/basic-checks/</guid>
      <description>Basic checks Syntax checkFirst of all, making sure your file is understood by PHP is a trivial but critical check. PHP provides a linter to verify a file can be run:&#xA;$ php -l &amp;lt;file&amp;gt; Syntax check only (lint) The linter can be run on a whole project if a list of files to check is created. On a Linux bash, this command looks for all the PHP files (except in folders vendor and tests) then runs the linter on each of them:</description>
    </item>
    <item>
      <title>Advanced checks</title>
      <link>https://devdocs.prestashop-project.org/1.7/modules/testing/advanced-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/modules/testing/advanced-checks/</guid>
      <description>Advanced checks Static AnalysisIn the previous chapter we dealt with the critical syntax error. Although we made sure it can be read by PHP, errors can exist in it and need to be caught before being sent to production. Static code analysers are able to detect some of these issues, such as:&#xA;calling an undefined class or method from PHP or your project, trying to get the value of an unset variable, sending the wrong type of parameter to a method having a mismatch between your PHPdoc and your code &amp;hellip; There are three major tools able to analyse your code: PHPStan, Psalm and Phan.</description>
    </item>
    <item>
      <title>Continuous Integration / Continuous Deployment</title>
      <link>https://devdocs.prestashop-project.org/1.7/modules/testing/ci-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/modules/testing/ci-cd/</guid>
      <description>Continuous Integration / Continuous DeploymentIn the previous page we detailed some testing tools and how to execute them. They may be run locally, in order to check that the code is fine before pushing it to a remote git repository, but they can also be automatically run by a dedicated test environment after each push. This can be useful to prevent code being pushed to production if one of your tools reports an issue you missed.</description>
    </item>
    <item>
      <title>Testing Resources</title>
      <link>https://devdocs.prestashop-project.org/1.7/modules/testing/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/modules/testing/resources/</guid>
      <description>Testing Resources Docker imagesDocker isolate your application in containers, making their isolation and deployment easier. If you&amp;rsquo;re confident with using it, we created several images for easier deployment of PrestaShop:&#xA;https://hub.docker.com/r/prestashop/prestashop/, in which all PrestaShop releases between 1.4 and 1.7 can be found. Covers most needs and is perfect for a quick start. https://hub.docker.com/r/prestashop/prestashop-git/, containing the git repository content with different PHP version. For advanced users. https://hub.docker.com/r/prestashop/base/, containing the required stack to run PrestaShop, without the core files.</description>
    </item>
  </channel>
</rss>
