<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Theme development reference on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/1.7/themes/reference/</link>
    <description>Recent content in Theme development reference on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://devdocs.prestashop-project.org/1.7/themes/reference/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Migrating from PrestaShop 1.6</title>
      <link>https://devdocs.prestashop-project.org/1.7/themes/reference/migration-from-16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop-project.org/1.7/themes/reference/migration-from-16/</guid>
      <description>Migrating from PrestaShop 1.6 PrestaShop 1.7 introduces a totally reworked theme system from version 1.6, with the goal of making PrestaShop upgrades easier, and making it easier and faster to create a brand new theme.
The huge change to the theme system means that there is no easy way to migrate your PrestaShop 1.6 theme to PrestaShop 1.7.
When using the automatic upgrade from PrestaShop 1.6 to 1.7, your theme will be switched to the new default theme, called &amp;ldquo;Classic&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Overriding modules</title>
      <link>https://devdocs.prestashop-project.org/1.7/themes/reference/overriding-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop-project.org/1.7/themes/reference/overriding-modules/</guid>
      <description>Overriding modules When you write a theme, you often need to override the templates and assets coming from a module so that they match your theme&amp;rsquo;s specific markup needs. Themes can override modules&#39; assets (CSS and JavaScript only) by placing the corresponding file at a specific location.
With PrestaShop 1.7, all module overriding code goes to the modules directory (in your module&amp;rsquo;s own directory).
This change was introduced with Pull Request #5020.</description>
    </item>
    
    <item>
      <title>Overriding selectors</title>
      <link>https://devdocs.prestashop-project.org/1.7/themes/reference/overriding-selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop-project.org/1.7/themes/reference/overriding-selectors/</guid>
      <description>Overriding selectors When you write a theme, you often need to change the markup, but if you do this, you&amp;rsquo;ll encounter some problems because core&amp;rsquo;s and classic&amp;rsquo;s javascript use some class in order to work.
Two selectors maps are available since 1.7.8 one on the core side (/themes/_core/js/selectors.js) and another one inside the classic theme (/themes/classic/_dev/js/selectors.js).
That means that almost every selectors we use inside every JS files are inside these two files.</description>
    </item>
    
    <item>
      <title>RTL support</title>
      <link>https://devdocs.prestashop-project.org/1.7/themes/reference/rtl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop-project.org/1.7/themes/reference/rtl/</guid>
      <description>RTL support PrestaShop supports RTL (Right-to-left) themes natively.
RTL stylesheets There are two ways of customizing your theme for RTL: either by adding an override file that is only loaded for RTL languages, or by using completely different version of the theme&amp;rsquo;s stylesheets.
CSS override file PrestaShop will try to load a css file named rtl.css after your theme&amp;rsquo;s ones when displayed in an RTL language. You can use this file to place any style override you need for RTL.</description>
    </item>
    
    <item>
      <title>Smarty helper functions</title>
      <link>https://devdocs.prestashop-project.org/1.7/themes/reference/smarty-helpers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop-project.org/1.7/themes/reference/smarty-helpers/</guid>
      <description>Helpers: functions and modifiers PrestaShop 1.7 provides several smarty helper functions and modifiers. See Smarty extensions for a full reference.</description>
    </item>
    
    <item>
      <title>Theme translation</title>
      <link>https://devdocs.prestashop-project.org/1.7/themes/reference/theme-translation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop-project.org/1.7/themes/reference/theme-translation/</guid>
      <description>How to translate your theme PrestaShop 1.7 comes with a new translation system for themes.
The following instructions only apply to PrestaShop 1.7.2 and later. In previous versions, exported themes didn&amp;rsquo;t include the selected and included translations. 1. Add new or customize existing wordings in a theme Adding new wordings is easy when building your theme. You simply need to edit the .tpl file of your choice and add (or customize) a wording.</description>
    </item>
    
    <item>
      <title>Theme-specific modules</title>
      <link>https://devdocs.prestashop-project.org/1.7/themes/reference/theme-specific-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop-project.org/1.7/themes/reference/theme-specific-modules/</guid>
      <description>Theme-specific modules When you write a theme, you may need to extend PrestaShop features. You can do that by adding modules that will be tied to your theme and shipped with it.
Adding a module Theme-specific modules should be placed in your theme&amp;rsquo;s dependencies/modules directory:
. └── dependencies │ └── modules │ └── mymodule ... Declaring the module You can declare the module in your theme&amp;rsquo;s theme.yml file:
dependencies:modules:- mymoduleglobal_settings:modules:to_enable:- mymoduleThis will make PrestaShop:</description>
    </item>
    
  </channel>
</rss>
