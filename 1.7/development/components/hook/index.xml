<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Hook component on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/1.7/development/components/hook/</link>
    <description>Recent content in The Hook component on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/1.7/development/components/hook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Register a new hook</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/components/hook/register-new-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/components/hook/register-new-hook/</guid>
      <description>How to register a new Hook in PrestaShopThis is basically three steps:&#xA;dispatch the hook in the code (in templates or PHP classes/files); update the hooks xml definition of Installer; update the hooks table for &amp;ldquo;Auto Upgrade&amp;rdquo; system; Dispatching hooksMost of the time, you will dispatch the hook using an instance of HookDispatcher. It can be retrieved from the service container and/or injected, as it&amp;rsquo;s done for example in Form Handlers:</description>
    </item>
    <item>
      <title>Symfony bridge for hooks</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/components/hook/symfony-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/components/hook/symfony-bridge/</guid>
      <description>Symfony bridge for hooksIn Back-Office, migrated pages are powered by Symfony. The powerful Symfony Event Dispatcher has been chosen to replace, in the long term, hooks. However, in order to preserve backward compatibility, both systems coexist in 1.7.&#xA;It is important that modules which subscribe to a hook are correctly notified no matter where the hook is dispatched from, be it in legacy code or modern code.&#xA;In legacy code, hooks are dispatched using Hook::exec().</description>
    </item>
  </channel>
</rss>
