<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PrestaShop components on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/1.7/development/components/</link>
    <description>Recent content in PrestaShop components on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/1.7/development/components/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Back Office Help sidebar</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/components/back-office-help-sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/components/back-office-help-sidebar/</guid>
      <description>The Back Office Help sidebarBack Office controller returns Back Office HTML pages.&#xA;Most of these Back Office pages have a common HTML structure:&#xA;a layout at the top a menu navigation bar on the left the page content at the center a collapsable right sidebar that contains documentation About the help sidebar contentWhen the BO user clicks on the &amp;lsquo;Help&amp;rsquo; button, the sidebar opens and displays the related Documentation page for the Back Office page that the user browses.</description>
    </item>
    <item>
      <title>Context</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/components/context/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/components/context/</guid>
      <description>Context componentThe Context is a component first introduced with version 1.5 of PrestaShop. Its two goals are:&#xA;preventing developers from using global variables. enabling them to change the context of some methods. The Context is a registry for PHP variables that were previously accessed as globals. It aims to standardize the way these variables are accessed, and to make the code more robust by getting rid of global vars.</description>
    </item>
    <item>
      <title>Global JavaScript components</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/components/global-components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/components/global-components/</guid>
      <description>Global JavaScript components It&amp;rsquo;s a new system available since the 1.7.8 version mainly created for module developers, which allow you to use components we already use in the core without importing it. Here is the ADR where we decided what we should do to avoid this problem.&#xA;You are now able to use components we expose to the window.prestashop.component object without importing anything.&#xA;This object contains two attributes:&#xA;component which contain some components you can instantiate; instance which contains every instances of initiated components.</description>
    </item>
    <item>
      <title>Router and Dispatcher component</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/components/router-dispatcher/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/components/router-dispatcher/</guid>
      <description>Router and DispatcherThe legacy Dispatcher and the Symfony Router are in charge of parsing incoming HTTP requests and finding the right Controller to return HTTP response.&#xA;Front office routingThe Front office controllers lie in the controllers/front directory.&#xA;The Dispatcher matches a given HTTP request with a Front Office controller.&#xA;When you visit / on your shop, you are being returned the Homepage unless you have your shop installed in a subdirectory, then /your_subdirectory is your Homepage.</description>
    </item>
    <item>
      <title>TinyMCE</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/components/tinymce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/components/tinymce/</guid>
      <description>Modify the TinyMCE configuration You are able to modify the configuration by using the actionAdminControllerSetMedia hook.&#xA;Inside the JS file you added with this hook, you need to create a global object containing your custom configuration:&#xA;window.defaultTinyMceConfig = { [...] } and as you can see in the tinymce core file it will load it instead of the default core configuration.&#xA;Keep in mind that the config is not completely replaced, it&amp;rsquo;s an Object.</description>
    </item>
    <item>
      <title>Users</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/components/users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/components/users/</guid>
      <description>Users AuthenticationThree types of users can be authenticated on PrestaShop:&#xA;Front-Office browser users Back-Office browser users API consumers Front-Office users and Back office users have access to a login form, where they must input email and password.&#xA;API consumers are authenticated using an API key.&#xA;LoginUpon successfull verification of email and password, browser users are logged in through the creation of a Cookie in Context::updateCustomer().&#xA;Multiple hooks allow modules to interact with the authentication process, at different steps.</description>
    </item>
  </channel>
</rss>
