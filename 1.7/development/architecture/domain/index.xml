<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Domain-driven architecture on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/</link>
    <description>Recent content in Domain-driven architecture on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/1.7/development/architecture/domain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CQRS - Commands and Queries</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/cqrs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/cqrs/</guid>
      <description>CQRS - Commands and Queries What is CQRS?CQRS stands for Command Query Responsibility Segregation. In brief, the CQRS pattern suggests to separate &amp;ldquo;write&amp;rdquo; and &amp;ldquo;read&amp;rdquo; models, which it refers to as Commands and Queries. In a web application like a CMS, we perform either &amp;ldquo;read&amp;rdquo; operations which return information to the user or &amp;ldquo;write&amp;rdquo; operations which modify the data managed by the application.&#xA;Why using CQRS in PrestaShop?During Back Office migration to Symfony, PrestaShop needs a way to access and alter data on the new Symfony pages without multiplying the sources of truth, and without accessing ObjectModel (e.</description>
    </item>
    <item>
      <title>Domain services</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/domain-services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/domain-services/</guid>
      <description>Domain servicesAs mentioned in CQRS principles, a Command is a representation of a single domain use case. To prevent Command Handlers from duplicating code and depending on each other, it is usually best to avoid implementing the actual logic in the Command Handler itself, and delegate it to Domain Services instead. These services are responsible for logic such as:&#xA;Persisting the entities (a.k.a. ObjectModel in current prestashop architecture) data into database Validating the entities Performing various modifications of related data structures etc.</description>
    </item>
    <item>
      <title>Data Transfer Objects</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/data-transfer-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/data-transfer-objects/</guid>
      <description>Data Transfer ObjectsPrestaShop is using Data Transfer Objects (or DTOs) in its codebase, in this section you learn how you can benefit from using DTOs as well.&#xA;What is Data Transfer Object?Data Transfer Object is object (e.g. UserData) that contains data in a structured format. This means that DTO usually comes with getter methods or public properties for accessing it&amp;rsquo;s data. The main benefit of using DTOs is that you know what data it has.</description>
    </item>
    <item>
      <title>Value Objects</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/value_objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/value_objects/</guid>
      <description>Value ObjectsPrestaShop is using Value Objects in its codebase. To help you understand better what they are, this article aims to explain what Value object is and how to use it.&#xA;What is Value Object?Value Objects (VO for short) are small, simple, immutable objects, like Money or a date range, whose equality is not based on their identity. This means that any two given instances of a same VO are considered equal when they contain the same values.</description>
    </item>
    <item>
      <title>Domain exceptions</title>
      <link>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/domain-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/1.7/development/architecture/domain/domain-exceptions/</guid>
      <description>Domain exceptionsWith introduction of domain driven design in PrestaShop, a new way of error handling in the code is seeing the daylight. The code in PrestaShop\PrestaShop\Core\Domain namespace started to utilize domain exceptions.&#xA;What is a domain exception A domain exception is an exception, that is thrown in application&amp;rsquo;s domain level, which is specific to that particular domain. Let&amp;rsquo;s see how domain exceptions look like in the code. For this example, let&amp;rsquo;s look at Category domain:</description>
    </item>
  </channel>
</rss>
