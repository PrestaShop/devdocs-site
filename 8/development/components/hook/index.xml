<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Hook component on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/8/development/components/hook/</link>
    <description>Recent content in The Hook component on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/8/development/components/hook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Subscribing to a Hook</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/hook/subscribing-to-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/hook/subscribing-to-hook/</guid>
      <description>Subscribing to a HookThe Hook component acts as a registry for hook subscriptions, storing which modules have subscribed to which hook. Multiple modules can subscribe to the same hook, and a single module can subscribe to multiple hooks.&#xA;Modules subscribe to hooks through the registerHook() static function:&#xA;Hook::registerHook(Module $moduleInstance, string|string[] $subscribedHooks, ?int[] $shopIds = null): bool This method returns true if the operation is successful, false otherwise.&#xA;Parameters$moduleInstance : Instance of the module subscribing to the hook</description>
    </item>
    <item>
      <title>Dispatching a Hook</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/hook/dispatching-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/hook/dispatching-hook/</guid>
      <description>Dispatching a HookHooks are placed everywhere throughout the software. Whenever a given hook is dispatched, the Hook component will check which modules subscribed to that hook and notify them by successively calling each subscriber&amp;rsquo;s callback.&#xA;Hooks are dispatched using the Hook::exec() function.&#xA;Hook::exec( string $hookName, array $arguments, ?int $moduleId = null, bool $returnArray = false, bool $checkExceptions = true, bool $usePush = false, int $shopId = null, bool $chain = false ): mixed This method returns the result of all hook notification callbacks.</description>
    </item>
    <item>
      <title>Adding a new Core hook</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/hook/register-new-hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/hook/register-new-hook/</guid>
      <description>How to add a new Core HookAlthough hooks are automatically created the first time they are subscribed to, new hooks added to the Core itself need to be properly registered and documented.&#xA;Here are the steps you need to follow.&#xA;1. Dispatch the new hookThe very first step is just to dispatch the new hook wherever you need it, as explained in Dispatching a Hook.&#xA;2. Update the Hooks definition fileAll known hooks are registered in the ps_hook database table.</description>
    </item>
    <item>
      <title>Symfony bridge for hooks</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/hook/symfony-bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/hook/symfony-bridge/</guid>
      <description>Symfony bridge for hooksIn Back-Office, migrated pages are powered by Symfony. The powerful Symfony Event Dispatcher has been chosen to replace, in the long term, hooks. However, in order to preserve backward compatibility, both systems coexist.&#xA;It is important that modules which subscribe to a hook are correctly notified no matter where the hook is dispatched from, be it in legacy code or modern code.&#xA;In legacy code, hooks are dispatched using Hook::exec().</description>
    </item>
  </channel>
</rss>
