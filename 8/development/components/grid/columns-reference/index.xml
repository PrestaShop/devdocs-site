<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Column Types reference on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/</link>
    <description>Recent content in Column Types reference on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BadgeColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/badge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/badge/</guid>
      <description> BadgeColumn TypeThis basic BadgeColumn displays a raw field data in Grid, associated with a badge.&#xA;Available options Properties Type Expected value field string required Record field name which column displays. badge_type string default: success Indicates which field of the row contains the image source. (Allowed values: success, info, danger, warning) Example usage&amp;lt;?php use PrestaShop\PrestaShop\Core\Grid\Column\Type\Common\BadgeColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $badgeColumn = new BadgeColumn(&amp;#39;total_spent&amp;#39;); $badgeColumn-&amp;gt;setName(&amp;#39;Sales&amp;#39;); $badgeColumn-&amp;gt;setOptions([ &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;total_spent&amp;#39;, &amp;#39;badge_type&amp;#39; =&amp;gt; &amp;#39;success&amp;#39;, &amp;#39;empty_value&amp;#39; =&amp;gt; &amp;#39;--&amp;#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($badgeColumn); </description>
    </item>
    <item>
      <title>ColorColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/color/</guid>
      <description> ColorColumn TypeIt is used to display a color field data as a background-colored badge in Grid.&#xA;Available options Properties Type Expected value field string required The record field name that the column displays. color_field string required The field name of the color to display. Example usage&amp;lt;?php use PrestaShop\PrestaShop\Core\Grid\Column\Type\ColorColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $colorColumn = new ColorColumn(&amp;#39;color&amp;#39;); $colorColumn-&amp;gt;setName(&amp;#39;color&amp;#39;); $colorColumn-&amp;gt;setOptions([ &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;color&amp;#39;, &amp;#39;color_field&amp;#39; =&amp;gt; &amp;#39;color&amp;#39; ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($colorColumn); </description>
    </item>
    <item>
      <title>DataColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/data/</guid>
      <description> DataColumn TypeThe most basic column is DataColumn. It is used to display raw field data in Grid.&#xA;Available options Properties Type Expected value field string required The record field name that the column displays. Example usage&amp;lt;?php use PrestaShop\PrestaShop\Core\Grid\Column\Type\DataColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $dataColumn = new DataColumn(&amp;#39;id_product&amp;#39;); $dataColumn-&amp;gt;setName(&amp;#39;ID&amp;#39;); $dataColumn-&amp;gt;setOptions([ &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;id_product&amp;#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($dataColumn); </description>
    </item>
    <item>
      <title>DateTimeColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/datetime/</guid>
      <description> DateTimeColumn TypeYou can use this column type in your Grid to format datetime values. It is common to get datetime values (e.g. Created at, Updated at &amp;amp; etc.) from the database and format them before displaying.&#xA;Available options Properties Type Expected value field string required The record field name that the column displays. format string default: Y-m-d H:i:s The format to use when formatting datetime values. Example usage&amp;lt;?php use PrestaShop\PrestaShop\Core\Grid\Column\Type\Common\DateTimeColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $dateTimeColumn = new DateTimeColumn(&amp;#39;datetime&amp;#39;); $dateTimeColumn-&amp;gt;setName(&amp;#39;Created at&amp;#39;); $dateTimeColumn-&amp;gt;setOptions([ &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;date_add&amp;#39;, // the field name that has a datetime value &amp;#39;format&amp;#39; =&amp;gt; &amp;#39;Y/d/m H:i:s&amp;#39;, // define a custom format for the datetime ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($dateTimeColumn); </description>
    </item>
    <item>
      <title>HtmlColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/html/</guid>
      <description>HtmlColumn TypeDisplays raw data without any escaping. Can be used to display HTML in grid.&#xA;Using this column could open you to XSS attacks, if you are using this column take steps to make sure that data displayed by this column is secure. If you are using form together with grid, safe way is to use FormattedTextareaType . Available options Properties Type Expected value field string required The record field name that the column displays.</description>
    </item>
    <item>
      <title>ImageColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/image/</guid>
      <description> ImageColumn TypeThis column is used to display an image from a row. You need to specify which field of the row contains the image source.&#xA;Available options Properties Type Expected value src_field string required Indicates which field of the row contains the image source Example usage&amp;lt;?php use PrestaShop\PrestaShop\Core\Grid\Column\Type\Common\ImageColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $imageColumn = new ImageColumn(&amp;#39;flag&amp;#39;); $imageColumn-&amp;gt;setName(&amp;#39;Flag&amp;#39;); $imageColumn-&amp;gt;setOptions([ &amp;#39;src_field&amp;#39; =&amp;gt; &amp;#39;flag&amp;#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($imageColumn); </description>
    </item>
    <item>
      <title>LinkColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/link/</guid>
      <description>LinkColumn TypeThis LinkColumn displays a raw field data encapsulated in a link (very useful for adding an edition link on a name, for example).&#xA;Available options Properties Type Expected value field string required The record field name that the column displays. route string required The route used to generate the link url. route_param_name string required The parameter name used by the route to generate the url. route_param_field string required The record field containing the route parameter.</description>
    </item>
    <item>
      <title>ToggleColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/toggle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/toggle/</guid>
      <description>ToggleColumn TypeThis ToggleColumn is used to display booleans, it will display an icon instead of the value. If the user clicks on it, this triggers a toggle of the boolean value.&#xA;Warning: the ajax call trigger is subordinated to the loading of the relative js extension (ColumnTogglingExtension). That is not automatic but have to be done manually if the grid does not have any other Toggle Column by default. You can use the global component to load the extension.</description>
    </item>
    <item>
      <title>ActionColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/action/</guid>
      <description>ActionColumn TypeThis column type allows adding actions to your Grid rows. The action targets the corresponding row. For more info about possible actions see Actions reference.&#xA;Available options Properties Type Expected value actions array default: null List of actions assigned to each row. Example usage&amp;lt;?php use PrestaShop\PrestaShop\Core\Grid\Column\Type\Common\ActionColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; use PrestaShop\PrestaShop\Core\Grid\Action\Row\Type\LinkRowAction; $actionColumn = new ActionColumn(&amp;#39;actions&amp;#39;); $actionColumn-&amp;gt;setName(&amp;#39;Actions&amp;#39;); $actionColumn-&amp;gt;setOptions([ &amp;#39;actions&amp;#39; =&amp;gt; [ -&amp;gt;add((new LinkRowAction(&amp;#39;delete&amp;#39;)) -&amp;gt;setIcon(&amp;#39;delete&amp;#39;) -&amp;gt;setOptions([ &amp;#39;route&amp;#39; =&amp;gt; &amp;#39;admin_custom_route&amp;#39;, &amp;#39;route_param_name&amp;#39; =&amp;gt; &amp;#39;mailId&amp;#39;, &amp;#39;route_param_field&amp;#39; =&amp;gt; &amp;#39;id_mail&amp;#39;, &amp;#39;confirm_message&amp;#39; =&amp;gt; &amp;#39;Delete selected item?</description>
    </item>
    <item>
      <title>BulkActionColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/bulk-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/bulk-action/</guid>
      <description> BulkActionColumn TypeThis column type allows adding bulk action checkboxes to your Grid. This only adds the checkbox in the grid, you can then manage bulk actions via javascript.&#xA;Available options Properties Type Expected value bulk_field string required: The record field name that will be used as the bulk action checkbox value. Example usage&amp;lt;?php use PrestaShop\PrestaShop\Core\Grid\Column\Type\Common\BulkActionColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $bulkActionColumn = new BulkActionColumn(&amp;#39;bulk_action&amp;#39;); $bulkActionColumn-&amp;gt;setName(&amp;#39;&amp;#39;); // it is common to set an empty name for bulk action columns $bulkActionColumn-&amp;gt;setOptions([ &amp;#39;bulk_field&amp;#39; =&amp;gt; &amp;#39;id_product&amp;#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($bulkActionColumn); </description>
    </item>
    <item>
      <title>PositionColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/position/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/position/</guid>
      <description>PositionColumn TypeThis column type allows you to define rows position using a drag and drop feature. Besides this column definition you need to use our javascript PositionExtension and prepare a route to manage the positions update. To help you create this controller you can use our PositionUpdater component.&#xA;Available options Properties Type Expected value id_field string required The record field containing its id. position_field string required The record field containing its position.</description>
    </item>
    <item>
      <title>EmployeeNameWithAvatarColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/employee-name-with-avatar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/employee-name-with-avatar/</guid>
      <description> EmployeeNameWithAvatarColumn TypeThis is a special type that allows you to add a column with the employee name and its avatar to your Grid. You can see how it looks by default:&#xA;Employee name with avatar column Available options Properties Type Expected value field string required Employee&amp;rsquo;s name field. fieldtype: string required&#xA;The employee&amp;rsquo;s name field.&#xA;Example usage&amp;lt;?php use PrestaShop\PrestaShop\Core\Grid\Column\Type\Employee\EmployeeNameWithAvatarColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $employeeColumn = new EmployeeNameWithAvatarColumn(&amp;#39;employee&amp;#39;); $employeeColumn-&amp;gt;setName(&amp;#39;Employee&amp;#39;); $employeeColumn-&amp;gt;setOptions([ &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;employee&amp;#39;, ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($employeeColumn); </description>
    </item>
    <item>
      <title>SeverityLevelColumn reference</title>
      <link>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/severity-level/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/components/grid/columns-reference/severity-level/</guid>
      <description> SeverityLevelColumn TypeUse this column to display severity level in your Grid.&#xA;Available options Properties Type Expected value field string required Record field name which is used as severity level. with_message bool default: false Whether to show severity level message in addition with numeric severity level value. Example usage&amp;lt;?php use PrestaShop\PrestaShop\Core\Grid\Column\Type\Status\SeverityLevelColumn; use PrestaShop\PrestaShop\Core\Grid\Column\ColumnCollection; $severityColumn = new SeverityLevelColumn(&amp;#39;severity&amp;#39;); $severityColumn-&amp;gt;setName(&amp;#39;Severity (1-4)&amp;#39;); $severityColumn-&amp;gt;setOptions([ &amp;#39;field&amp;#39; =&amp;gt; &amp;#39;severity&amp;#39;, &amp;#39;with_message&amp;#39; =&amp;gt; true, // enable severity messages ]); $columns = new ColumnCollection(); $columns-&amp;gt;add($severityColumn); </description>
    </item>
  </channel>
</rss>
