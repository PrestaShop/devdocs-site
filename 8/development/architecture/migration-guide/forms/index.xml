<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Forms on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/8/development/architecture/migration-guide/forms/</link>
    <description>Recent content in Forms on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/8/development/architecture/migration-guide/forms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CRUD Forms</title>
      <link>https://devdocs.prestashop-project.org/8/development/architecture/migration-guide/forms/crud-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/architecture/migration-guide/forms/crud-forms/</guid>
      <description>CRUD Forms IntroductionIn computer programming, CRUD is an acronym for the four basic functions of persistent storage: create, read, update, and delete.&#xA;PrestaShop handles several logic objects, like Cart, Product, Order, Customer&amp;hellip; among many others. When such objects are stored using a unique identifier, we refer to them as identifiable objects.&#xA;In the Back Office, most identifiable objects are managed using forms and page listings that follow the CRUD pattern.</description>
    </item>
    <item>
      <title>Settings Forms</title>
      <link>https://devdocs.prestashop-project.org/8/development/architecture/migration-guide/forms/settings-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/architecture/migration-guide/forms/settings-forms/</guid>
      <description>Settings Forms IntroductionIn PrestaShop, there are a lots of settings forms that require a unified way to handle of them. To move the settings creation and update out of controllers the following components are being used:&#xA;Form Data Provider - responsible for options data retrieval and saving the data. Form Handler - responsible for building the form. Form Data ProvidersIn order to load existing data into the form (when editing, for instance) and save the form data (when the form is submitted), you need to create and register a Form Data Provider.</description>
    </item>
    <item>
      <title>CQRS usage in forms</title>
      <link>https://devdocs.prestashop-project.org/8/development/architecture/migration-guide/forms/cqrs-usage-in-forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/development/architecture/migration-guide/forms/cqrs-usage-in-forms/</guid>
      <description>CQRS usage in forms This article assumes that you are already familiar with CQRS and CRUD forms, as this topic only demonstrates the usage of the CQRS approach. The basicsTo use CQRS you need to:&#xA;Inject a CommandBus or QueryBus instance using your class constructor. Create an instance of the desired Command or Query. Call your command using the CommandBus or QueryBus. Usage examples Using CommandsIn this example, we will be working with edition in a Contact CRUD Form.</description>
    </item>
  </channel>
</rss>
