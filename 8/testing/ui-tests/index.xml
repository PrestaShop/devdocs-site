<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UI tests on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop-project.org/8/testing/ui-tests/</link>
    <description>Recent content in UI tests on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://devdocs.prestashop-project.org/8/testing/ui-tests/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to create your own UI tests</title>
      <link>https://devdocs.prestashop-project.org/8/testing/ui-tests/how-to-create-your-own-ui-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/testing/ui-tests/how-to-create-your-own-ui-tests/</guid>
      <description>How to create your own UI tests ArchitecturePage Object Model (also called Page Object Pattern) is a way to organize your code in a test framework. It encourages you to separate your test logic from your page manipulation logic.&#xA;Our team uses POM as an architecture to organize the code: on one side we have our page logic, and on the other side we have our test logic.&#xA;The goal is to write your test code once, and only change the page logic when someone updates the application.</description>
    </item>
    <item>
      <title>How to execute UI Tests</title>
      <link>https://devdocs.prestashop-project.org/8/testing/ui-tests/how-to-execute-tests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://devdocs.prestashop-project.org/8/testing/ui-tests/how-to-execute-tests/</guid>
      <description>How to execute UI TestsThis is thoroughly explained in README in the tests/UI folder. You&amp;rsquo;ll need a working installation of PrestaShop in order to run the tests.&#xA;How to execute specific testsIf you want to run only one test from a campaign or a couple of tests in the same folder, you can use test:specific command.&#xA;To specify which test to run, you can add the TEST_PATH parameter in the beginning of the command</description>
    </item>
  </channel>
</rss>
